// Generated by gencpp from file hcsr04/distance.msg
// DO NOT EDIT!


#ifndef HCSR04_MESSAGE_DISTANCE_H
#define HCSR04_MESSAGE_DISTANCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hcsr04
{
template <class ContainerAllocator>
struct distance_
{
  typedef distance_<ContainerAllocator> Type;

  distance_()
    : front(0.0)
    , down(0.0)
    , front_time()
    , down_time()  {
    }
  distance_(const ContainerAllocator& _alloc)
    : front(0.0)
    , down(0.0)
    , front_time()
    , down_time()  {
  (void)_alloc;
    }



   typedef float _front_type;
  _front_type front;

   typedef float _down_type;
  _down_type down;

   typedef ros::Time _front_time_type;
  _front_time_type front_time;

   typedef ros::Time _down_time_type;
  _down_time_type down_time;





  typedef boost::shared_ptr< ::hcsr04::distance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hcsr04::distance_<ContainerAllocator> const> ConstPtr;

}; // struct distance_

typedef ::hcsr04::distance_<std::allocator<void> > distance;

typedef boost::shared_ptr< ::hcsr04::distance > distancePtr;
typedef boost::shared_ptr< ::hcsr04::distance const> distanceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hcsr04::distance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hcsr04::distance_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hcsr04::distance_<ContainerAllocator1> & lhs, const ::hcsr04::distance_<ContainerAllocator2> & rhs)
{
  return lhs.front == rhs.front &&
    lhs.down == rhs.down &&
    lhs.front_time == rhs.front_time &&
    lhs.down_time == rhs.down_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hcsr04::distance_<ContainerAllocator1> & lhs, const ::hcsr04::distance_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hcsr04

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hcsr04::distance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hcsr04::distance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hcsr04::distance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hcsr04::distance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hcsr04::distance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hcsr04::distance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hcsr04::distance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c475cd559c7cfc2f328489a1905a9e3";
  }

  static const char* value(const ::hcsr04::distance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c475cd559c7cfc2ULL;
  static const uint64_t static_value2 = 0xf328489a1905a9e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::hcsr04::distance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hcsr04/distance";
  }

  static const char* value(const ::hcsr04::distance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hcsr04::distance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#前后左右\n"
"float32  front \n"
"float32  down\n"
"time front_time\n"
"time down_time\n"
"\n"
;
  }

  static const char* value(const ::hcsr04::distance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hcsr04::distance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front);
      stream.next(m.down);
      stream.next(m.front_time);
      stream.next(m.down_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct distance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hcsr04::distance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hcsr04::distance_<ContainerAllocator>& v)
  {
    s << indent << "front: ";
    Printer<float>::stream(s, indent + "  ", v.front);
    s << indent << "down: ";
    Printer<float>::stream(s, indent + "  ", v.down);
    s << indent << "front_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.front_time);
    s << indent << "down_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.down_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HCSR04_MESSAGE_DISTANCE_H
